[import test]
[import uc/lexer]

day02 :: () {
  test("Day 02 (Part 1)", -> () {
    p := Load("input/2.txt")

    if !p {
      print("could not load input\n")
      exit(0)
    }

    valid := 0

    while !Eof(p) {
      minT := Next(p)
      Next(p) # -
      maxT  := Next(p)
      letter := Next(p)->start[0]
      Next(p) # :
      passwdT := Next(p)
      Next(p) # \n

      minB : [10]u8
      maxB : [10]u8

      Token_Text(minB as *u8, 10 as u64, minT)
      Token_Text(maxB as *u8, 10 as u64, maxT)

      min := atoi(minB as *u8)
      max := atoi(maxB as *u8)

      len := (passwdT->end - passwdT->start) + 1 as u64
      count := 0

      i := 0
      while i < len {
        if passwdT->start[i] == letter {
          count++
        }
        i++
      }

      if count >= min && count <= max {
        valid++
      }
    }

    assert_equals(valid, 607, "valid == 607")
  })

  test("Day 02 (Part 2)", -> () {
    p := Load("input/2.txt")

    if !p {
      print("could not load input\n")
      exit(0)
    }

    valid := 0

    while !Eof(p) {
      minT := Next(p)
      Next(p) # -
      maxT  := Next(p)
      letter := Next(p)->start[0]
      Next(p) # :
      passwdT := Next(p)
      Next(p) # \n

      minB : [10]u8
      maxB : [10]u8

      Token_Text(minB as *u8, 10 as u64, minT)
      Token_Text(maxB as *u8, 10 as u64, maxT)

      min := atoi(minB as *u8)
      max := atoi(maxB as *u8)

      len := (passwdT->end - passwdT->start) + 1 as u64
      count := 0

      if passwdT->start[min - 1] == letter {
        count++
      }

      if passwdT->start[max - 1] == letter {
        count++
      }

      if count == 1 {
        valid++
      }
    }

    assert_equals(valid, 321, "valid == 321")
  })
}
