[import ./utils]
[import uc/lexer]

day01_part1 :: () {
  test("Day 01 (Part 1)", -> () {
    input := Load_Text("day01.input")

    if !input {
      print("could not load input\n")
      exit(0)
    }

    entries_used := 0
    entries := malloc(1024 * 4) as *i32

    start := input
    end   := input

    while *end != 0 {
      if *end == 10 { # \n
        entries[entries_used] = Read_Int(start, end)
        entries_used = entries_used + 1

        start = end + 1
      }

      end = end + 1
    }

    a := 0
    b := 0

    solved := 0

    while a < entries_used && !solved {
      b = 0
      while b < entries_used && !solved {
        if entries[a] + entries[b] == 2020 {
          solved = 1
        } else {
          b = b + 1
        }
      }
      if !solved {
        a = a + 1
      }
    }

    if solved {
      assert_equals( entries[a] + entries[b], 2020 as i32, "a + b == 2020" )
      assert_equals( entries[a] * entries[b], 987339 as i32, "a + b == 987339" )
    } else {
      print("could not solve...\n")
    }

    free(entries as ptr)
  })
}
